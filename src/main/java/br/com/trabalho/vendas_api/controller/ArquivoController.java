package br.com.trabalho.vendas_api.controller;

import br.com.trabalho.vendas_api.service.ArquivoProcessor;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

/**
 * Controlador REST respons√°vel pelo upload e teste de arquivos.
 * Permite upload de arquivos .dat e m√©todos de diagn√≥stico para depura√ß√£o.
 */
@RestController
@RequestMapping("/arquivo")
@CrossOrigin(origins = "*")
public class ArquivoController {

    @Autowired
    private ArquivoProcessor arquivoProcessor;

    /**
     * Endpoint para upload de arquivo .dat.
     *
     * @param file Arquivo enviado pelo cliente via multipart/form-data.
     * @return ResponseEntity com mensagem de sucesso ou erro.
     */
    @PostMapping("/upload")
    public ResponseEntity<String> uploadArquivo(@RequestParam("file") MultipartFile file) {
        try {
            System.out.println("=== üìÅ UPLOAD INICIADO ===");
            System.out.println("Nome do arquivo: " + file.getOriginalFilename());
            System.out.println("Tamanho: " + file.getSize() + " bytes");
            System.out.println("Content-Type: " + file.getContentType());

            if (file.isEmpty()) {
                System.out.println("‚ùå Arquivo vazio!");
                return ResponseEntity.badRequest().body("‚ùå Arquivo vazio!");
            }

            if (!file.getOriginalFilename().toLowerCase().endsWith(".dat")) {
                System.out.println("‚ùå Formato inv√°lido: " + file.getOriginalFilename());
                return ResponseEntity.badRequest().body("‚ùå Formato inv√°lido! Apenas arquivos .dat s√£o aceitos.");
            }

            String resultado = arquivoProcessor.processarArquivoUpload(file);
            System.out.println("‚úÖ " + resultado);
            return ResponseEntity.ok(resultado);

        } catch (Exception e) {
            System.err.println("‚ùå ERRO NO UPLOAD: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500)
                    .body("‚ùå Erro interno: " + e.getMessage());
        }
    }

    /**
     * Endpoint de diagn√≥stico para testar se o arquivo chega corretamente.
     * √ötil para depura√ß√£o de problemas de envio via Postman ou front-end.
     *
     * @param file Arquivo enviado opcionalmente pelo cliente.
     * @return ResponseEntity com informa√ß√µes do arquivo ou mensagem de erro.
     */
    @PostMapping("/teste-simples")
    public ResponseEntity<String> testeSimples(@RequestParam(value = "file", required = false) MultipartFile file) {
        System.out.println("=== üß™ TESTE DIAGN√ìSTICO INICIADO ===");

        if (file == null) {
            System.out.println("‚ùå FILE √â NULL - O par√¢metro 'file' n√£o est√° chegando!");
            System.out.println("üí° Prov√°vel problema: Key no Postman n√£o √© 'file'");
            return ResponseEntity.badRequest().body("‚ùå Erro: Par√¢metro 'file' n√£o encontrado. Verifique se no Postman a Key √© 'file'");
        }

        System.out.println("‚úÖ FILE N√ÉO √â NULL - Par√¢metro chegou!");
        System.out.println("üìÅ Nome: " + file.getOriginalFilename());
        System.out.println("üìè Tamanho: " + file.getSize());
        System.out.println("üî§ Content-Type: " + file.getContentType());
        System.out.println("üì¶ Est√° vazio? " + file.isEmpty());

        if (file.isEmpty()) {
            System.out.println("‚ùå FILE EST√Å VAZIO");
            return ResponseEntity.badRequest().body("‚ùå Arquivo vazio");
        }

        if (!file.getOriginalFilename().toLowerCase().endsWith(".dat")) {
            System.out.println("‚ùå N√ÉO √â ARQUIVO .dat: " + file.getOriginalFilename());
            return ResponseEntity.badRequest().body("‚ùå Apenas arquivos .dat s√£o aceitos");
        }

        System.out.println("üéØ TESTE CONCLU√çDO COM SUCESSO!");
        return ResponseEntity.ok("‚úÖ Teste OK! Arquivo: " + file.getOriginalFilename() + " (" + file.getSize() + " bytes)");
    }

    /**
     * Endpoint alternativo de depura√ß√£o para analisar a request completa.
     * Mostra m√©todo, headers e verifica se √© multipart/form-data.
     *
     * @param request HttpServletRequest recebido pelo Spring.
     * @return ResponseEntity com informa√ß√µes da request ou mensagem de erro.
     */
    @PostMapping("/debug-request")
    public ResponseEntity<String> debugRequest(HttpServletRequest request) {
        System.out.println("=== üîç ANALISANDO REQUEST ===");
        System.out.println("Method: " + request.getMethod());
        System.out.println("Content-Type: " + request.getContentType());
        System.out.println("Content-Length: " + request.getContentLength());
        System.out.println("Headers:");
        request.getHeaderNames().asIterator().forEachRemaining(headerName -> {
            System.out.println("  " + headerName + ": " + request.getHeader(headerName));
        });

        if (request.getContentType() == null || !request.getContentType().startsWith("multipart/form-data")) {
            System.out.println("‚ùå N√ÉO √â MULTIPART/FORM-DATA!");
            System.out.println("üí° Content-Type atual: " + request.getContentType());
            return ResponseEntity.badRequest().body("‚ùå Content-Type deve ser multipart/form-data");
        }

        System.out.println("‚úÖ √â MULTIPART/FORM-DATA!");
        return ResponseEntity.ok("‚úÖ Request analisado - Tudo OK com o Content-Type");
    }
}
